apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chassis.fullname" . }}
  labels:
    {{- include "chassis.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "chassis.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "chassis.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "chassis.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DEPLOYMENT
              value: {{ include "chassis.fullname" . }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MODE
              value: {{ .Values.storage.provider | quote }}
            - name: STORAGE_CREDENTIALS_SECRET_NAME
              value: {{ .Values.storage.credentialsSecretName | quote }}
            - name: STORAGE_BUCKET_NAME
              value: {{ .Values.storage.bucketName | quote }}
            - name: REGISTRY_URL
              value: {{ .Values.registry.url | quote }}
            - name: REGISTRY_CREDENTIALS_SECRET_NAME
              value: {{ .Values.registry.credentialsSecretName | quote }}
            - name: REPOSITORY_PREFIX
              value: {{ .Values.registry.repositoryPrefix | quote }}
{{/*          {{- if .Values.proxySettings.enabled }}*/}}
{{/*            - name: http_proxy*/}}
{{/*              value: {{ .Values.proxySettings.http_proxy | quote }}*/}}
{{/*            - name: HTTP_PROXY*/}}
{{/*              value: {{ .Values.proxySettings.http_proxy | quote }}*/}}
{{/*            - name: https_proxy*/}}
{{/*              value: {{ .Values.proxySettings.https_proxy | quote }}*/}}
{{/*            - name: HTTPS_PROXY*/}}
{{/*              value: {{ .Values.proxySettings.https_proxy | quote }}*/}}
{{/*            - name: no_proxy*/}}
{{/*              value: {{ .Values.proxySettings.no_proxy | quote }}*/}}
{{/*            - name: NO_PROXY*/}}
{{/*              value: {{ .Values.proxySettings.no_proxy | quote }}*/}}
{{/*          {{- end }}*/}}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: "/tmp"
              name: cache
            {{- if eq .Values.storage.provider "pv" }}
            - mountPath: "/data"
              name: kaniko-data
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: cache
          emptyDir: {}
        {{- if eq .Values.storage.provider "pv" }}
        - name: kaniko-data
          persistentVolumeClaim:
            claimName: {{ include "chassis.fullname" . }}-kaniko-data-pvc
        {{- end }}
