specification: '3.0'
type: "file"
source: "Custom Model"
version: "0.0.1"
name: "Factorization Machines"
author: "AWS Sagamaker"

description:
  summary: "The Factorization Machines algorithm is a general-purpose supervised learning algorithm that you can use for both 
            classification and regression tasks. "
  details: "It is an extension of a linear model that is designed to capture interactions between features within high dimensional 
            sparse datasets economically. For example, in a click prediction system, the Factorization Machines model can capture click 
            rate patterns observed when ads from a certain ad-category are placed on pages from a certain page-category. Factorization 
            machines are a good choice for tasks dealing with high dimensional sparse datasets, such as click prediction and item recommendation."

  technical: |-
    #OVERVIEW:
    The prediction task for a Factorization Machines model is to estimate a function Å· from a feature set xi to a target domain. 
    This domain is real-valued for regression and binary for classification. The Factorization Machines model is supervised and so 
    has a training dataset (xi,yj) available. 

    #TRAINING:
    For training, the Factorization Machines algorithm currently supports only the recordIO-protobuf format with Float32 tensors. 
    Because their use case is predominantly on sparse data, CSV is not a good candidate. Both File and Pipe mode training are supported 
    for recordIO-wrapped protobuf.

    #VALIDATION:

    For inference, the Factorization Machines algorithm supports the application/json and x-recordio-protobuf formats.

      - For the binary classification problem, the algorithm predicts a score and a label. The label is a number and can be either 0 or 1. 
      The score is a number that indicates how strongly the algorithm believes that the label should be 1. The algorithm computes score first 
      and then derives the label from the score value. If the score is greater than or equal to 0.5, the label is 1.
      - For the regression problem, just a score is returned and it is the predicted value. For example, if Factorization Machines is used to 
      predict a movie rating, score is the predicted rating value.


    #INPUT SPECIFICATION:
    The input(s) to this model must adhere to the following specifications:
    | Filename      | Maximum Size | Accepted Format(s) |
    | --------      | ------------ | ------------------ |
    | image         | 1K           | jpg, png, tif      |

    Additional information describing input file(s) can go in a short paragraph here if necessary. Feel free to add an additional markdown table if many values need to be listed.

    #OUTPUT DETAILS:
    This model will output the following:
    | Filename      | Maximum Size | Format |
    | --------      | ------------ | ------ |
    | results.json  | 128 B        | .json  | 

  performance: "The Factorization Machines algorithm reports three binary classification metrics, which are computed during training. When tuning the model for binary classification tasks, 
                choose one of these as the objective."

releaseNotes: "The Amazon SageMaker implementation of the Factorization Machines algorithm considers only pair-wise (2nd order) interactions between features."

tags:
  - "regression"
  - "factorization"
  - "latent factors"
  - "features"
filters:
  - type: "Task"
    label: "Factorize dataset"
  - type: "Input Type"
    label: "Image"
  - type: "Subject"
    label: "Latent features"

metrics:
  - label: "Use case dependent"
    value: 1.0
    type: "probability"
    description: "For a classification task, the model is trained by minimizing the cross entropy loss, also known as the log loss."


inputs:
  image:
    acceptedMediaTypes:
      - "image/jpeg"
      - "image/png"
      - "image/tiff"
    maxSize: 1 Kb
    description: "Any jpg or png image for classification"

outputs:
  results.json:
    mediaType: "application/json"
    maxSize: 128B
    description: "Is zero or not the digit in the image"

resources:
  memory:
    size: 512M
  cpu:
    count: 1
  gpu:
    count: 0

timeout:
  status: 20s
  run: 20s

internal:
  recommended: false
  experimental: false
  available: true
  active: true
  features:
    explainable: false
    adversarialDefense: false
